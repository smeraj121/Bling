@model ProofOfConcept.Models.PhotoCommentCombined

@{
    ViewBag.Title = "DisplayPhoto";
}
<style>
    #stats {
        font-size: 1.5em;
        text-align: center;
        margin-top: 10px;
    }

    .imagecontainer {
        height: 45vh !important;
        border: none;
    }

    .thumbnails {
        height: 100% !important;
        border-radius: 8px;
    }

    .thumbnails {
        background-color: white;
        /*transition: transform 1s;*/
        text-align: center;
    }
    /*.thumbnails:hover {
            -ms-transform: scale(1.3); /* IE 9 */
    /*-webkit-transform: scale(1.3); /* Safari 3-8 */
    /*transform: scale(1.3);
        }*/
    .photocontainer {
        height: 350px;
    }

    .imagecontainer > a {
        height: 100%;
    }

    @@media (min-width: 300px) and (min-height: 400px) and (orientation:portrait) {
        .imagecontainer {
            height: auto !important
        }

        .thumbnails {
            height: auto !important;
            width: 100% !important;
        }
    }
</style>
@*<script>$(window).load(() => { $($('.imagecontainer').children()[0]).height($('.imagecontainer').height() - $($('.imagecontainer').children()[1]).height() - 5) })</script>*@
<h2>DisplayPhoto</h2>
<hr />
@if (Model.Photo == null)
{
    <h3>Photo Not Available</h3>
}else
{ <div>
        <span style="font-weight:bold"><a href="@Url.Action("ViewUser", "Users", new { user = "" + @Model.Photo.UserId + "" })">@Model.Photo.Username</a></span>
        <span style="float:right">@Model.Photo.DOU.ToLongDateString()</span>
        <br />
        <br /><div class="box">
            <div class="imagecontainer text-center">
                @{if (Model.Photo.ContentType.Trim() == "Video")
                    {
                        <video controls style="height:inherit;width:100%" class="thumbnail img-responsive text-center">
                            <source id='preview' src="@Model.Photo.Video">
                            Video Preview
                        </video>
                    }
                    else
                    {
                        <img src="@Model.Photo.PhotoPath" class="thumbnails" value="tyrytghfc" />
                    }
                }
            </div>

            <div id="stats">
                <span>@Html.DisplayFor(modelItem => Model.Photo.Loves)</span>
                @{ var UserId = ViewBag.UserId.ToString(); }
                <span class="glyphicon @((Model.Photo.LovedBy.IndexOf("," + UserId + ",") > -1) ? "glyphicon-heart" : "glyphicon-heart-empty") " style="color:hotpink"></span>
                |
                <span>@Html.DisplayFor(modelItem => Model.Photo.Likes)</span>
                <span class="glyphicon glyphicon-thumbs-up @((Model.Photo.LikedBy.IndexOf("," + UserId + ",") > -1) ? "liked" : "")"></span>
                |
                <span>@Html.DisplayFor(modelItem => Model.Photo.Dislikes)</span>
                <span class="glyphicon glyphicon-thumbs-down @((Model.Photo.DisLikedBy.IndexOf("," + UserId + ",") > -1) ? "disliked" : "")"></span>
            </div>
        </div>
        <br />
        <span>@Html.DisplayFor(model => model.Photo.Caption)A paragraph (from the Ancient Greek παράγραφος paragraphos, "to write beside" or "written beside") is a self-contained unit of a discourse in writing dealing with a particular point or idea. A paragraph consists of one or more sentences.</span>
    </div>
    <p>
        @Html.ActionLink("Private", "Private", new { id = Model.Photo.PhotoID }) |
        @Html.ActionLink("Delete", "Delete", new { id = Model.Photo.PhotoID }) |
        @Html.ActionLink("Change Caption", "EditPhoto", new { id = Model.Photo.PhotoID }) |
        @{if (Model.Photo.ContentType.Trim() == "Video")
            { @Html.ActionLink("Change Thumbnail and Preview", "ChangeThumbnail", new { id = Model.Photo.PhotoID });
        } } |
        @Html.ActionLink("Back to List", "Index")
    </p>
    <div>
        <h6>Comments</h6>
        @foreach (var item in Model.Comments)
        {
            <div>
                <a href="@Url.Action("GetUser", "Users", new { userid = item.UserId })">
                    @{var path = item.ProfilePic.Split('/'); path[6] = "w_400,h_400,c_crop,g_face,r_max/w_50";}
                    <img src="@string.Join("/", path)" class="thumbnails" value="tyrytghfc" />
                </a>
                <p>@item.Text</p>
            </div>
            <div id="stats commentStats">
                <span>@Html.DisplayFor(modelItem => item.Loves)</span>
                <span class="glyphicon @((item.LovedBy.IndexOf("," + UserId + ",") > -1) ? "glyphicon-heart" : "glyphicon-heart-empty") " style="color:hotpink"></span>
                |
                <span>@Html.DisplayFor(modelItem => item.Likes)</span>
                <span class="glyphicon glyphicon-thumbs-up @((item.LikedBy.IndexOf("," + UserId + ",") > -1) ? "liked" : "")"></span>
                |
                <span>@Html.DisplayFor(modelItem => item.Dislikes)</span>
                <span class="glyphicon glyphicon-thumbs-down @((item.DislikedBy.IndexOf("," + UserId + ",") > -1) ? "disliked" : "")"></span>
            </div>
        }

        <form action="postComment">
            <input type="text" max="250" /><input type="submit" value="Add" />
        </form>
    </div>
}

<script src="~/Scripts/Uploads.js"></script>